// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macros carmi-react: carmi-react 1`] = `
"
// @carmi
import carmi from './macro'
const { root } = require('../../index');
const {createElement} = require('../../jsx');
const todosList = <div>{root.get(0)}</div>;
module.exports = {todosList};

      ↓ ↓ ↓ ↓ ↓ ↓

module.exports = function () {
  'use strict';
  function model($model, $funcLib, $batchingStrategy) {
    const $res = { $model };
    const $listeners = new Set();const $trackingMap = new WeakMap();const $trackedMap = new WeakMap();const $trackingWildcards = new WeakMap();const $invalidatedMap = new WeakMap();const $invalidatedRoots = new Set();$invalidatedRoots.$subKeys = {};$invalidatedRoots.$parentKey = null;$invalidatedRoots.$parent = null;let $first = true;let $tainted = new WeakSet();$invalidatedMap.set($res, $invalidatedRoots);const untrack = ($targetKeySet, $targetKey) => {
      const $tracked = $trackedMap.get($targetKeySet);if (!$tracked || !$tracked[$targetKey]) {
        return;
      }$tracked[$targetKey].forEach(({ $sourceObj, $sourceKey, $target }) => {
        const $trackingSource = $trackingMap.get($sourceObj);$trackingSource[$sourceKey].delete($target);
      });delete $tracked[$targetKey];
    };const invalidate = ($targetKeySet, $targetKey) => {
      if ($targetKeySet.has($targetKey)) {
        return;
      }$targetKeySet.add($targetKey);untrack($targetKeySet, $targetKey);if ($targetKeySet.$parent) {
        invalidate($targetKeySet.$parent, $targetKeySet.$parentKey);
      }
    };function setOnObject($target, $key, $val, $invalidates) {
      let $changed = false;let $hard = false;if ($invalidates && !$first) {
        if (typeof $target[$key] === 'object' && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $val === 'object' && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          $changed = true;triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;return $changed;
    }function setOnArray($target, $key, $val, $invalidates) {
      let $hard = false;if ($invalidates && !$first) {
        if (typeof $target[$key] === 'object' && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $target[$key] === 'object' && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;
    }function triggerInvalidations($sourceObj, $sourceKey, $hard) {
      $tainted.add($sourceObj);const $track = $trackingMap.get($sourceObj);if ($track && $track.hasOwnProperty($sourceKey)) {
        $track[$sourceKey].forEach(($soft, $target) => {
          if (!$soft || $hard) {
            invalidate($target[0], $target[1]);
          }
        });
      }if ($trackingWildcards.has($sourceObj)) {
        $trackingWildcards.get($sourceObj).forEach($targetInvalidatedKeys => {
          invalidate($targetInvalidatedKeys, $sourceKey);
        });
      }
    }function getEmptyArray($invalidatedKeys, $targetKey, token) {
      const subKeys = $invalidatedKeys.$subKeys;const $cachePerTargetKey = subKeys[$targetKey] = subKeys[$targetKey] || new Map();if (!$cachePerTargetKey.has(token)) {
        $cachePerTargetKey.set(token, []);
      }return $cachePerTargetKey.get(token);
    }function array($invalidatedKeys, key, newVal, identifier, len, invalidates) {
      const res = getEmptyArray($invalidatedKeys, key, identifier);invalidates = invalidates && res.length === len;for (let i = 0; i < len; i++) {
        setOnArray(res, i, newVal[i], invalidates);
      }return res;
    }function call($invalidatedKeys, key, newVal, identifier, len, invalidates) {
      const arr = getEmptyArray($invalidatedKeys, key, identifier);if (arr.length === 0) {
        arr.push([]);
      }const args = arr[0];for (let i = 0; i < len; i++) {
        setOnArray(args, i, newVal[i], true);
      }if (arr.length === 1 || $tainted.has(args)) {
        arr[1] = $funcLib[args[0]].apply($res, args.slice(1));
      }return arr[1];
    }$invalidatedRoots.add('todosList');function $todosListBuild() {
      const key = 'todosList';const $invalidatedKeys = $invalidatedRoots;const newValue = call($invalidatedKeys, key, [\\"createElement\\", $res[\\"$array_jsx_4_10_1\\"]], '4', 2, false);setOnObject($res, 'todosList', newValue, false);$invalidatedRoots.delete('todosList');return $res.todosList;
    }$invalidatedRoots.add('$array_jsx_4_10_1');function $array_jsx_4_10_1Build() {
      const key = '$array_jsx_4_10_1';const $invalidatedKeys = $invalidatedRoots;const newValue = array($invalidatedKeys, key, [\\"div\\", null, $model[0]], '2', 3, false);setOnObject($res, '$array_jsx_4_10_1', newValue, false);$invalidatedRoots.delete('$array_jsx_4_10_1');return $res.$array_jsx_4_10_1;
    }let $inBatch = false;let $batchPending = [];function recalculate() {
      if ($inBatch) {
        return;
      }$invalidatedRoots.has('$array_jsx_4_10_1') && $array_jsx_4_10_1Build();$invalidatedRoots.has('todosList') && $todosListBuild();$first = false;$tainted = new WeakSet();$listeners.forEach(callback => callback());if ($batchPending.length) {
        $res.$endBatch();
      }
    }Object.assign($res, {}, { $startBatch: () => {
        $inBatch = true;
      }, $endBatch: () => {
        $inBatch = false;if ($batchPending.length) {
          $batchPending.forEach(({ func, args }) => {
            func.apply($res, args);
          });$batchPending = [];recalculate();
        }
      }, $runInBatch: func => {
        $res.$startBatch();func();$res.$endBatch();
      }, $addListener: func => {
        $listeners.add(func);
      }, $removeListener: func => {
        $listeners.delete(func);
      }, $setBatchingStrategy: func => {
        $batchingStrategy = func;
      } });recalculate();return $res;
  }return model;
}();
"
`;

exports[`macros magic-comment: magic-comment 1`] = `
"
// @carmi
import carmi from './macro'
const { root } = require('../../index');
module.exports = { first: root.get(0), second: root.get(1) };

      ↓ ↓ ↓ ↓ ↓ ↓

module.exports = function () {
  'use strict';
  function model($model, $funcLib, $batchingStrategy) {
    const $res = { $model };const $listeners = new Set();const $trackingMap = new WeakMap();const $trackedMap = new WeakMap();const $trackingWildcards = new WeakMap();const $invalidatedMap = new WeakMap();const $invalidatedRoots = new Set();$invalidatedRoots.$subKeys = {};$invalidatedRoots.$parentKey = null;$invalidatedRoots.$parent = null;let $first = true;let $tainted = new WeakSet();$invalidatedMap.set($res, $invalidatedRoots);const untrack = ($targetKeySet, $targetKey) => {
      const $tracked = $trackedMap.get($targetKeySet);if (!$tracked || !$tracked[$targetKey]) {
        return;
      }$tracked[$targetKey].forEach(({ $sourceObj, $sourceKey, $target }) => {
        const $trackingSource = $trackingMap.get($sourceObj);$trackingSource[$sourceKey].delete($target);
      });delete $tracked[$targetKey];
    };const invalidate = ($targetKeySet, $targetKey) => {
      if ($targetKeySet.has($targetKey)) {
        return;
      }$targetKeySet.add($targetKey);untrack($targetKeySet, $targetKey);if ($targetKeySet.$parent) {
        invalidate($targetKeySet.$parent, $targetKeySet.$parentKey);
      }
    };function setOnObject($target, $key, $val, $invalidates) {
      let $changed = false;let $hard = false;if ($invalidates && !$first) {
        if (typeof $target[$key] === 'object' && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $val === 'object' && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          $changed = true;triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;return $changed;
    }function triggerInvalidations($sourceObj, $sourceKey, $hard) {
      $tainted.add($sourceObj);const $track = $trackingMap.get($sourceObj);if ($track && $track.hasOwnProperty($sourceKey)) {
        $track[$sourceKey].forEach(($soft, $target) => {
          if (!$soft || $hard) {
            invalidate($target[0], $target[1]);
          }
        });
      }if ($trackingWildcards.has($sourceObj)) {
        $trackingWildcards.get($sourceObj).forEach($targetInvalidatedKeys => {
          invalidate($targetInvalidatedKeys, $sourceKey);
        });
      }
    }$invalidatedRoots.add('first');function $firstBuild() {
      const newValue = $model[0];setOnObject($res, 'first', newValue, false);$invalidatedRoots.delete('first');return $res.first;
    }$invalidatedRoots.add('second');function $secondBuild() {
      const newValue = $model[1];setOnObject($res, 'second', newValue, false);$invalidatedRoots.delete('second');return $res.second;
    }let $inBatch = false;let $batchPending = [];function recalculate() {
      if ($inBatch) {
        return;
      }$invalidatedRoots.has('first') && $firstBuild();$invalidatedRoots.has('second') && $secondBuild();$first = false;$tainted = new WeakSet();$listeners.forEach(callback => callback());if ($batchPending.length) {
        $res.$endBatch();
      }
    }Object.assign($res, {}, { $startBatch: () => {
        $inBatch = true;
      }, $endBatch: () => {
        $inBatch = false;if ($batchPending.length) {
          $batchPending.forEach(({ func, args }) => {
            func.apply($res, args);
          });$batchPending = [];recalculate();
        }
      }, $runInBatch: func => {
        $res.$startBatch();func();$res.$endBatch();
      }, $addListener: func => {
        $listeners.add(func);
      }, $removeListener: func => {
        $listeners.delete(func);
      }, $setBatchingStrategy: func => {
        $batchingStrategy = func;
      } });recalculate();return $res;
  }return model;
}();
"
`;

exports[`macros template-literal: template-literal 1`] = `
"
const carmi = require('./macro')

const modelBuilder = carmi\`
  const {root} = require('../..')
  module.exports = {all: root.get('list'), first: root.get('list').get(0)}
\`

      ↓ ↓ ↓ ↓ ↓ ↓

const modelBuilder = (function () {
  'use strict';
  function model($model, $funcLib, $batchingStrategy) {
    const $res = { $model };const $listeners = new Set();const $trackingMap = new WeakMap();const $trackedMap = new WeakMap();const $trackingWildcards = new WeakMap();const $invalidatedMap = new WeakMap();const $invalidatedRoots = new Set();$invalidatedRoots.$subKeys = {};$invalidatedRoots.$parentKey = null;$invalidatedRoots.$parent = null;let $first = true;let $tainted = new WeakSet();$invalidatedMap.set($res, $invalidatedRoots);const untrack = ($targetKeySet, $targetKey) => {
      const $tracked = $trackedMap.get($targetKeySet);if (!$tracked || !$tracked[$targetKey]) {
        return;
      }$tracked[$targetKey].forEach(({ $sourceObj, $sourceKey, $target }) => {
        const $trackingSource = $trackingMap.get($sourceObj);$trackingSource[$sourceKey].delete($target);
      });delete $tracked[$targetKey];
    };const invalidate = ($targetKeySet, $targetKey) => {
      if ($targetKeySet.has($targetKey)) {
        return;
      }$targetKeySet.add($targetKey);untrack($targetKeySet, $targetKey);if ($targetKeySet.$parent) {
        invalidate($targetKeySet.$parent, $targetKeySet.$parentKey);
      }
    };function setOnObject($target, $key, $val, $invalidates) {
      let $changed = false;let $hard = false;if ($invalidates && !$first) {
        if (typeof $target[$key] === 'object' && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $val === 'object' && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          $changed = true;triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;return $changed;
    }function triggerInvalidations($sourceObj, $sourceKey, $hard) {
      $tainted.add($sourceObj);const $track = $trackingMap.get($sourceObj);if ($track && $track.hasOwnProperty($sourceKey)) {
        $track[$sourceKey].forEach(($soft, $target) => {
          if (!$soft || $hard) {
            invalidate($target[0], $target[1]);
          }
        });
      }if ($trackingWildcards.has($sourceObj)) {
        $trackingWildcards.get($sourceObj).forEach($targetInvalidatedKeys => {
          invalidate($targetInvalidatedKeys, $sourceKey);
        });
      }
    }$invalidatedRoots.add('all');function $allBuild() {
      const newValue = $model[\\"list\\"];setOnObject($res, 'all', newValue, false);$invalidatedRoots.delete('all');return $res.all;
    }$invalidatedRoots.add('first');function $firstBuild() {
      const newValue = $res[\\"all\\"][0];setOnObject($res, 'first', newValue, false);$invalidatedRoots.delete('first');return $res.first;
    }let $inBatch = false;let $batchPending = [];function recalculate() {
      if ($inBatch) {
        return;
      }$invalidatedRoots.has('all') && $allBuild();$invalidatedRoots.has('first') && $firstBuild();$first = false;$tainted = new WeakSet();$listeners.forEach(callback => callback());if ($batchPending.length) {
        $res.$endBatch();
      }
    }Object.assign($res, {}, { $startBatch: () => {
        $inBatch = true;
      }, $endBatch: () => {
        $inBatch = false;if ($batchPending.length) {
          $batchPending.forEach(({ func, args }) => {
            func.apply($res, args);
          });$batchPending = [];recalculate();
        }
      }, $runInBatch: func => {
        $res.$startBatch();func();$res.$endBatch();
      }, $addListener: func => {
        $listeners.add(func);
      }, $removeListener: func => {
        $listeners.delete(func);
      }, $setBatchingStrategy: func => {
        $batchingStrategy = func;
      } });recalculate();return $res;
  }return model;
})();
"
`;
